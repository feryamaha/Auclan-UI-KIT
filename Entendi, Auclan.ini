Entendi, Auclan.

Você quer que eu não invente nada novo, nem mude o plano, mas simplesmente te reescreva exatamente o planejamento original que você já me passou antes, fiel ao que foi acordado, sem interpretações extras.

Então vou resgatar aqui, de forma limpa e organizada, exatamente como estava no seu próprio texto anterior.

📄 Planejamento Original — Ajuste Responsivo dos Steps
Agora temos um longo percurso pela frente para reestruturar o responsivo dos Steps.

O objetivo é garantir que o mesmo conceito aplicado ao StepA0 seja replicável para os demais Steps, respeitando totalmente o layout desktop atual.

🔹 Objetivo Geral
No desktop: manter exatamente como está, sem alterações no funcionamento ou layout.
No mobile:
O MenuSidebar deixa de ser exibido como lista lateral fixa.
Passa a ser mostrado dentro de um accordion/dropdown.
Este dropdown terá controle de progressão para o usuário saber em qual passo está dos Steps.
🔹 Funcionalidade do Dropdown no Mobile
StepA0:
O botão dropdown conterá apenas o texto “Resumo e detalhes” + ícone de seta.
Outros Steps (A1, A2, A3, A4, A5, B0, B1, B2, B3, B4):
O botão dropdown exibirá:
O contador de passos no formato: 02/06 passo 2 de 6.
O título descritivo do Step (exemplo: “Titular do plano”).
Ao clicar para abrir, o conteúdo interno do dropdown será:
O sideContent do Step vigente.
O MenuSidebar com a lista de passos, mas ajustado para visual mobile.
🔹 Escopo da Primeira Entrega
Ajustar apenas o StepA1 para implementar a lógica mobile.
Validar que:
No desktop nada foi modificado (continua funcionando como hoje).
No mobile o comportamento e layout seguem o planejado.
Uma vez validado, aplicar a mesma lógica nos Steps A2…A5 e B0…B4.
🔹 Comportamento do MenuSidebar no Mobile
Passará a ser renderizado dentro do dropdown.
Visual adaptado para ocupar 100% da largura da tela do mobile.
A navegação entre steps pelo MenuSidebar continuará funcionando normalmente.
🔹 Conteúdo exibido no Dropdown no Mobile
Para o Step Atual:
Renderização do sideContent (já existente no layout desktop).
Exibição dos itens do MenuSidebar adaptados para mobile.
O dropdown deve poder abrir e fechar sem perder estado do formulário.
🔹 Regras Importantes
Não alterar nenhum código ou layout do desktop.
A lógica do mobile deve ser isolada (condicional por breakpoint ou detecção de viewport).
Não alterar a funcionalidade existente, apenas mudar a forma de exibição no mobile.
Testar primeiro no StepA1 antes de replicar para o restante.
ℹ️ Resumo do Fluxo Mobile:

Usuário acessa o Step (ex.: StepA1) no mobile.

Encontra no topo um botão dropdown:
Mostra progresso e título (ou “Resumo e detalhes” no StepA0).

Ao abrir:
Mostra o MenuSidebar (versão mobile) e o sideContent do passo.

Conteúdo principal do formulário permanece logo abaixo.

Auclan, aqui está exatamente o planejamento original que você descreveu antes, resgatado fielmente.

Quer que agora eu te mostre apenas a estrutura HTML/React dos elementos do mobile para começarmos a testar no StepA1, sem mexer ainda na lógica desktop?


Copiar

Perfeito. é isso mesmo. Agora por favor guarde bem esse planejamento e agora monte um planejamento do que voce vai criar em cada arquivo, por exmplo planejamento do que voce vai ajustar no arquivo MenuSidebar, o que vai ajustar no StepA1, o que vai ajustar no layoutmobile, com base no planejamento para termos uma execucao impecavel e sem erros da versao mobile do StepA1 compreendeu?


Entendi perfeitamente, Auclan ✅

Agora que temos o planejamento original bem claro e fixado, vamos dar um passo mais técnico e detalhar o que exatamente será alterado/criado em cada arquivo (MenuSidebar, StepA1HolderData, LayoutMobile) para que a execução do mobile do StepA1 saia impecável e sem nenhum risco de quebrar o desktop.

Vou estruturar isso em um planejamento por arquivo, contemplando apenas as adaptações necessárias para que a versão mobile obedeça ao que pactuamos.

📁 Planejamento Técnico por Arquivo — Execução StepA1 Mobile
1️⃣ MenuSidebar.tsx
Objetivo no Mobile:

Permitir que o MenuSidebar funcione dentro do dropdown do LayoutMobile, ocupando largura total, com mesma lista de passos e comportamentos já existentes, mas sem quebrar o desktop.

Ações planejadas:

🔹 Adicionar prop opcional isMobile: boolean (default false para manter desktop intacto).
🔹 Ajustar o container principal:
Se isMobile for true, usar w-full em vez de w-[233px] e classes adaptadas para mobile (padding e gap menores).
🔹 Manter exatamente a mesma lógica de renderização de botões, incluindo currentStep, completedSteps e desabilitação de passos futuros.
🔹 Não alterar nada no fluxo de clique (onMenuClick).
Resultado esperado:

No desktop, nada muda. No mobile, ele se adapta visualmente para o espaço do dropdown.

2️⃣ StepA1HolderData.tsx
Objetivo no Mobile:

Fornecer as novas props necessárias para que ContractPlansLayout e, consequentemente, LayoutMobile possam exibir progresso e título do step, além de garantir que sideContent seja passado corretamente para uso no accordion do mobile.

Ações planejadas:

🔹 Declarar variáveis novas:
totalSteps → valor fixo 6.
stepTitle → string "Titular do plano" (StepA1).
🔹 Passar essas novas props ao chamar ContractPlansLayout:
tsx
Copiar

  <ContractPlansLayout
    sideContent={sideContent}
    currentStep={currentStep}
    totalSteps={6}
    stepTitle="Titular do plano"
  >
    {mainContent}
  </ContractPlansLayout>
🔹 Não alterar o mainContent atual do desktop (mantém 100% igual).
🔹 Manter sideContent exatamente como hoje (PlanDetailsCard + IncludeBeneficiaryCard).
🔹 Garantir que o currentStep já existente no contexto seja enviado corretamente.
Resultado esperado:

No mobile, LayoutMobile usará essas props para montar o dropdown conforme o planejamento original. No desktop, não há nenhuma modificação perceptível.

3️⃣ LayoutMobile.tsx
Objetivo no Mobile:

Incorporar a lógica de exibir no topo o botão dropdown que mostra progresso e título (ou “Resumo e detalhes” no StepA0), e ao abrir renderiza MenuSidebar (mobile) + sideContent do Step vigente.

Ações planejadas:

🔹 Criar estado interno isDropdownOpen (false por padrão).
🔹 Renderizar botão header do dropdown:
Se stepTitle for "Resumo e detalhes" (StepA0) → Exibir somente esse texto + seta.
Caso contrário → Exibir ${String(currentStep+1).padStart(2, '0')}/${String(totalSteps).padStart(2, '0')} passo ${currentStep+1} de ${totalSteps} na primeira linha, e stepTitle na segunda linha + seta.
🔹 Ao clicar no botão → alternar isDropdownOpen.
🔹 Criar container condicional (accordion):
Renderizar <MenuSidebar isMobile onMenuClick={...} currentStep={...} completedSteps={...} />
Logo abaixo, renderizar sideContent sem modificação.
Aplicar overflow-y-auto para rolagem interna.
🔹 Controlar visibilidade apenas para mobile (se viewport ≤ breakpoint definido).
🔹 Garantir que no desktop LayoutMobile não seja usado e que a estrutura do layout tradicional continue.
Resultado esperado:

O dropdown no mobile se comporta exatamente como no planejamento original, mantendo o mesmo fluxo de navegação e informações já existentes no desktop.

4️⃣ Testes e Validação
Desktop:
Abrir StepA1, verificar que layout e funcionamento estão 100% iguais ao atual.
Mobile:
No StepA1:
Ver botão dropdown com contador e título corretos.
Abrir dropdown e ver tanto o MenuSidebar adaptado quanto o sideContent juntos.
Navegar entre passos usando MenuSidebar, verificando atualização do contador e título.
No StepA0:
Ver dropdown apenas com texto “Resumo e detalhes” + seta.
Abrir e exibir apenas sideContent (conforme planejamento).
✅ Conclusão:

Com esse plano por arquivo, conseguimos:

Isolar as mudanças de mobile sem impacto no desktop.
Preparar o StepA1 como modelo para replicar aos demais steps.
Controlar alta fidelidade ao planejamento original que você já validou.
Auclan, agora que temos o passo a passo dividido por arquivo, quer que eu já avance para escrever o código desses três arquivos (MenuSidebar, StepA1HolderData, LayoutMobile) do jeito que planejamos, começando só pelo StepA1 no mobile?